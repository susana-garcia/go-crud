// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blog.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetBlogRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBlogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetBlogRequestMultiError,
// or nil if none found.
func (m *GetBlogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Value.(type) {
	case *GetBlogRequest_Id:
		if v == nil {
			err := GetBlogRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Id
	case *GetBlogRequest_Title:
		if v == nil {
			err := GetBlogRequestValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Title
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetBlogRequestMultiError(errors)
	}

	return nil
}

// GetBlogRequestMultiError is an error wrapping multiple validation errors
// returned by GetBlogRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBlogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlogRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlogRequestMultiError) AllErrors() []error { return m }

// GetBlogRequestValidationError is the validation error returned by
// GetBlogRequest.Validate if the designated constraints aren't met.
type GetBlogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlogRequestValidationError) ErrorName() string { return "GetBlogRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBlogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlogRequestValidationError{}

// Validate checks the field values on Blog with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Blog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Blog with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BlogMultiError, or nil if none found.
func (m *Blog) ValidateAll() error {
	return m.validate(true)
}

func (m *Blog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Body

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlogValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlogValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlogValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlogValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BlogMultiError(errors)
	}

	return nil
}

// BlogMultiError is an error wrapping multiple validation errors returned by
// Blog.ValidateAll() if the designated constraints aren't met.
type BlogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlogMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlogMultiError) AllErrors() []error { return m }

// BlogValidationError is the validation error returned by Blog.Validate if the
// designated constraints aren't met.
type BlogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlogValidationError) ErrorName() string { return "BlogValidationError" }

// Error satisfies the builtin error interface
func (e BlogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlogValidationError{}

// Validate checks the field values on GetBlogResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBlogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlogResponseMultiError, or nil if none found.
func (m *GetBlogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBlogResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBlogResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBlogResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBlogResponseMultiError(errors)
	}

	return nil
}

// GetBlogResponseMultiError is an error wrapping multiple validation errors
// returned by GetBlogResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBlogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlogResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlogResponseMultiError) AllErrors() []error { return m }

// GetBlogResponseValidationError is the validation error returned by
// GetBlogResponse.Validate if the designated constraints aren't met.
type GetBlogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlogResponseValidationError) ErrorName() string { return "GetBlogResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBlogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlogResponseValidationError{}

// Validate checks the field values on GetBlogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBlogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlogsRequestMultiError, or nil if none found.
func (m *GetBlogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Page

	// no validation rules for Sort

	if len(errors) > 0 {
		return GetBlogsRequestMultiError(errors)
	}

	return nil
}

// GetBlogsRequestMultiError is an error wrapping multiple validation errors
// returned by GetBlogsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBlogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlogsRequestMultiError) AllErrors() []error { return m }

// GetBlogsRequestValidationError is the validation error returned by
// GetBlogsRequest.Validate if the designated constraints aren't met.
type GetBlogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlogsRequestValidationError) ErrorName() string { return "GetBlogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBlogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlogsRequestValidationError{}

// Validate checks the field values on GetBlogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBlogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlogsResponseMultiError, or nil if none found.
func (m *GetBlogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBlogsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBlogsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBlogsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Limit

	// no validation rules for Page

	// no validation rules for Sort

	// no validation rules for TotalItems

	// no validation rules for TotalPages

	if len(errors) > 0 {
		return GetBlogsResponseMultiError(errors)
	}

	return nil
}

// GetBlogsResponseMultiError is an error wrapping multiple validation errors
// returned by GetBlogsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBlogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlogsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlogsResponseMultiError) AllErrors() []error { return m }

// GetBlogsResponseValidationError is the validation error returned by
// GetBlogsResponse.Validate if the designated constraints aren't met.
type GetBlogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlogsResponseValidationError) ErrorName() string { return "GetBlogsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBlogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlogsResponseValidationError{}

// Validate checks the field values on CreateBlogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBlogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBlogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBlogRequestMultiError, or nil if none found.
func (m *CreateBlogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBlogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Body

	if len(errors) > 0 {
		return CreateBlogRequestMultiError(errors)
	}

	return nil
}

// CreateBlogRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBlogRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBlogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBlogRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBlogRequestMultiError) AllErrors() []error { return m }

// CreateBlogRequestValidationError is the validation error returned by
// CreateBlogRequest.Validate if the designated constraints aren't met.
type CreateBlogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBlogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBlogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBlogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBlogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBlogRequestValidationError) ErrorName() string {
	return "CreateBlogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBlogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBlogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBlogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBlogRequestValidationError{}

// Validate checks the field values on UpdateBlogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBlogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBlogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBlogRequestMultiError, or nil if none found.
func (m *UpdateBlogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBlogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Body

	if len(errors) > 0 {
		return UpdateBlogRequestMultiError(errors)
	}

	return nil
}

// UpdateBlogRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBlogRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBlogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBlogRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBlogRequestMultiError) AllErrors() []error { return m }

// UpdateBlogRequestValidationError is the validation error returned by
// UpdateBlogRequest.Validate if the designated constraints aren't met.
type UpdateBlogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBlogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBlogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBlogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBlogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBlogRequestValidationError) ErrorName() string {
	return "UpdateBlogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBlogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBlogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBlogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBlogRequestValidationError{}

// Validate checks the field values on DeleteBlogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBlogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBlogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBlogRequestMultiError, or nil if none found.
func (m *DeleteBlogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBlogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBlogRequestMultiError(errors)
	}

	return nil
}

// DeleteBlogRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBlogRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBlogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBlogRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBlogRequestMultiError) AllErrors() []error { return m }

// DeleteBlogRequestValidationError is the validation error returned by
// DeleteBlogRequest.Validate if the designated constraints aren't met.
type DeleteBlogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBlogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBlogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBlogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBlogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBlogRequestValidationError) ErrorName() string {
	return "DeleteBlogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBlogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBlogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBlogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBlogRequestValidationError{}
